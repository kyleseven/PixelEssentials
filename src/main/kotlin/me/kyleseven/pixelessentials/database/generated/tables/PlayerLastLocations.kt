/*
 * This file is generated by jOOQ.
 */
package me.kyleseven.pixelessentials.database.generated.tables


import me.kyleseven.pixelessentials.database.generated.DefaultSchema
import me.kyleseven.pixelessentials.database.generated.keys.PLAYER_LAST_LOCATIONS__FK_PLAYER_LAST_LOCATIONS_PK_PLAYERS
import me.kyleseven.pixelessentials.database.generated.keys.PLAYER_LAST_LOCATIONS__PK_PLAYER_LAST_LOCATIONS
import me.kyleseven.pixelessentials.database.generated.tables.Players.PlayersPath
import me.kyleseven.pixelessentials.database.generated.tables.records.PlayerLastLocationsRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerLastLocations(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerLastLocationsRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerLastLocationsRecord>?,
    aliased: Table<PlayerLastLocationsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<PlayerLastLocationsRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>player_last_locations</code>
         */
        val PLAYER_LAST_LOCATIONS: PlayerLastLocations = PlayerLastLocations()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerLastLocationsRecord> = PlayerLastLocationsRecord::class.java

    /**
     * The column <code>player_last_locations.player_id</code>.
     */
    val PLAYER_ID: TableField<PlayerLastLocationsRecord, Int?> =
        createField(DSL.name("player_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>player_last_locations.x</code>.
     */
    val X: TableField<PlayerLastLocationsRecord, Double?> =
        createField(DSL.name("x"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>player_last_locations.y</code>.
     */
    val Y: TableField<PlayerLastLocationsRecord, Double?> =
        createField(DSL.name("y"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>player_last_locations.z</code>.
     */
    val Z: TableField<PlayerLastLocationsRecord, Double?> =
        createField(DSL.name("z"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>player_last_locations.pitch</code>.
     */
    val PITCH: TableField<PlayerLastLocationsRecord, Double?> =
        createField(DSL.name("pitch"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>player_last_locations.yaw</code>.
     */
    val YAW: TableField<PlayerLastLocationsRecord, Double?> =
        createField(DSL.name("yaw"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>player_last_locations.world</code>.
     */
    val WORLD: TableField<PlayerLastLocationsRecord, String?> =
        createField(DSL.name("world"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerLastLocationsRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<PlayerLastLocationsRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<PlayerLastLocationsRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>player_last_locations</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>player_last_locations</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>player_last_locations</code> table reference
     */
    constructor() : this(DSL.name("player_last_locations"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, PlayerLastLocationsRecord>?,
        parentPath: InverseForeignKey<out Record, PlayerLastLocationsRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        PLAYER_LAST_LOCATIONS,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerLastLocationsPath : PlayerLastLocations, Path<PlayerLastLocationsRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, PlayerLastLocationsRecord>?,
            parentPath: InverseForeignKey<out Record, PlayerLastLocationsRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<PlayerLastLocationsRecord>) : super(alias, aliased)
        override fun `as`(alias: String): PlayerLastLocationsPath = PlayerLastLocationsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerLastLocationsPath = PlayerLastLocationsPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerLastLocationsPath = PlayerLastLocationsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<PlayerLastLocationsRecord> = PLAYER_LAST_LOCATIONS__PK_PLAYER_LAST_LOCATIONS
    override fun getReferences(): List<ForeignKey<PlayerLastLocationsRecord, *>> =
        listOf(PLAYER_LAST_LOCATIONS__FK_PLAYER_LAST_LOCATIONS_PK_PLAYERS)

    private lateinit var _players: PlayersPath

    /**
     * Get the implicit join path to the <code>players</code> table.
     */
    fun players(): PlayersPath {
        if (!this::_players.isInitialized)
            _players = PlayersPath(this, PLAYER_LAST_LOCATIONS__FK_PLAYER_LAST_LOCATIONS_PK_PLAYERS, null)

        return _players;
    }

    val players: PlayersPath
        get(): PlayersPath = players()
    override fun `as`(alias: String): PlayerLastLocations = PlayerLastLocations(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerLastLocations = PlayerLastLocations(alias, this)
    override fun `as`(alias: Table<*>): PlayerLastLocations = PlayerLastLocations(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerLastLocations = PlayerLastLocations(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerLastLocations = PlayerLastLocations(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerLastLocations = PlayerLastLocations(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerLastLocations =
        PlayerLastLocations(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerLastLocations = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerLastLocations = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerLastLocations = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): PlayerLastLocations = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): PlayerLastLocations = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerLastLocations =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerLastLocations =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerLastLocations = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerLastLocations = where(DSL.notExists(select))
}
