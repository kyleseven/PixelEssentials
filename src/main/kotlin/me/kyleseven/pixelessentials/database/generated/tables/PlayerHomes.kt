/*
 * This file is generated by jOOQ.
 */
package me.kyleseven.pixelessentials.database.generated.tables


import me.kyleseven.pixelessentials.database.generated.DefaultSchema
import me.kyleseven.pixelessentials.database.generated.keys.PLAYER_HOMES__FK_PLAYER_HOMES_PK_PLAYERS
import me.kyleseven.pixelessentials.database.generated.keys.PLAYER_HOMES__PK_PLAYER_HOMES
import me.kyleseven.pixelessentials.database.generated.keys.PLAYER_HOMES__UK_PLAYER_HOMES_1_90449728
import me.kyleseven.pixelessentials.database.generated.tables.Players.PlayersPath
import me.kyleseven.pixelessentials.database.generated.tables.records.PlayerHomesRecord
import org.jooq.*
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PlayerHomes(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, PlayerHomesRecord>?,
    parentPath: InverseForeignKey<out Record, PlayerHomesRecord>?,
    aliased: Table<PlayerHomesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
) : TableImpl<PlayerHomesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>player_homes</code>
         */
        val PLAYER_HOMES: PlayerHomes = PlayerHomes()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PlayerHomesRecord> = PlayerHomesRecord::class.java

    /**
     * The column <code>player_homes.id</code>.
     */
    val ID: TableField<PlayerHomesRecord, Int?> =
        createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "")

    /**
     * The column <code>player_homes.player_id</code>.
     */
    val PLAYER_ID: TableField<PlayerHomesRecord, Int?> =
        createField(DSL.name("player_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>player_homes.x</code>.
     */
    val X: TableField<PlayerHomesRecord, Float?> =
        createField(DSL.name("x"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>player_homes.y</code>.
     */
    val Y: TableField<PlayerHomesRecord, Float?> =
        createField(DSL.name("y"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>player_homes.z</code>.
     */
    val Z: TableField<PlayerHomesRecord, Float?> =
        createField(DSL.name("z"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>player_homes.pitch</code>.
     */
    val PITCH: TableField<PlayerHomesRecord, Float?> =
        createField(DSL.name("pitch"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>player_homes.yaw</code>.
     */
    val YAW: TableField<PlayerHomesRecord, Float?> =
        createField(DSL.name("yaw"), SQLDataType.REAL.nullable(false), this, "")

    /**
     * The column <code>player_homes.world</code>.
     */
    val WORLD: TableField<PlayerHomesRecord, String?> =
        createField(DSL.name("world"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<PlayerHomesRecord>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        null
    )

    private constructor(alias: Name, aliased: Table<PlayerHomesRecord>?, parameters: Array<Field<*>?>?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        parameters,
        null
    )

    private constructor(alias: Name, aliased: Table<PlayerHomesRecord>?, where: Condition?) : this(
        alias,
        null,
        null,
        null,
        aliased,
        null,
        where
    )

    /**
     * Create an aliased <code>player_homes</code> table reference
     */
    constructor(alias: String) : this(DSL.name(alias))

    /**
     * Create an aliased <code>player_homes</code> table reference
     */
    constructor(alias: Name) : this(alias, null)

    /**
     * Create a <code>player_homes</code> table reference
     */
    constructor() : this(DSL.name("player_homes"), null)

    constructor(
        path: Table<out Record>,
        childPath: ForeignKey<out Record, PlayerHomesRecord>?,
        parentPath: InverseForeignKey<out Record, PlayerHomesRecord>?
    ) : this(
        Internal.createPathAlias(path, childPath, parentPath),
        path,
        childPath,
        parentPath,
        PLAYER_HOMES,
        null,
        null
    )

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class PlayerHomesPath : PlayerHomes, Path<PlayerHomesRecord> {
        constructor(
            path: Table<out Record>,
            childPath: ForeignKey<out Record, PlayerHomesRecord>?,
            parentPath: InverseForeignKey<out Record, PlayerHomesRecord>?
        ) : super(path, childPath, parentPath)

        private constructor(alias: Name, aliased: Table<PlayerHomesRecord>) : super(alias, aliased)
        override fun `as`(alias: String): PlayerHomesPath = PlayerHomesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): PlayerHomesPath = PlayerHomesPath(alias, this)
        override fun `as`(alias: Table<*>): PlayerHomesPath = PlayerHomesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<PlayerHomesRecord, Int?> =
        super.getIdentity() as Identity<PlayerHomesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<PlayerHomesRecord> = PLAYER_HOMES__PK_PLAYER_HOMES
    override fun getUniqueKeys(): List<UniqueKey<PlayerHomesRecord>> = listOf(PLAYER_HOMES__UK_PLAYER_HOMES_1_90449728)
    override fun getReferences(): List<ForeignKey<PlayerHomesRecord, *>> =
        listOf(PLAYER_HOMES__FK_PLAYER_HOMES_PK_PLAYERS)

    private lateinit var _players: PlayersPath

    /**
     * Get the implicit join path to the <code>players</code> table.
     */
    fun players(): PlayersPath {
        if (!this::_players.isInitialized)
            _players = PlayersPath(this, PLAYER_HOMES__FK_PLAYER_HOMES_PK_PLAYERS, null)

        return _players;
    }

    val players: PlayersPath
        get(): PlayersPath = players()
    override fun `as`(alias: String): PlayerHomes = PlayerHomes(DSL.name(alias), this)
    override fun `as`(alias: Name): PlayerHomes = PlayerHomes(alias, this)
    override fun `as`(alias: Table<*>): PlayerHomes = PlayerHomes(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): PlayerHomes = PlayerHomes(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): PlayerHomes = PlayerHomes(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): PlayerHomes = PlayerHomes(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): PlayerHomes =
        PlayerHomes(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): PlayerHomes = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): PlayerHomes = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): PlayerHomes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(condition: SQL): PlayerHomes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String): PlayerHomes = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg binds: Any?): PlayerHomes =
        where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL
    override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): PlayerHomes =
        where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): PlayerHomes = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): PlayerHomes = where(DSL.notExists(select))
}
